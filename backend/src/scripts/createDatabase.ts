import mysql from 'mysql2/promise';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.join(__dirname, '..', '..', '..');
const envPath = path.join(projectRoot, '.env');

console.log('üîç Searching for .env file in project root:', envPath);
console.log('‚úÖ .env file exists:', fs.existsSync(envPath));

dotenv.config({ path: envPath });

console.log('üîç Checking environment variables after loading:');
console.log('DB_HOST:', process.env.DB_HOST);
console.log('DB_PORT:', process.env.DB_PORT);
console.log('DB_USER:', process.env.DB_USER);
console.log('DB_PASSWORD:', process.env.DB_PASSWORD ? '***' : 'NOT SET');
console.log('DB_NAME:', process.env.DB_NAME);

async function createDatabase() {
  try {
    const dbConfig = {
      host: process.env.DB_HOST,
      port: parseInt(process.env.DB_PORT),
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME
    };

    console.log('üîå Final database configuration:', {
      host: dbConfig.host,
      port: dbConfig.port,
      user: dbConfig.user,
      database: dbConfig.database,
      passwordSet: !!dbConfig.password
    });

    if (!dbConfig.user) {
      throw new Error('DB_USER –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }

    console.log('üöÄ Attempting to connect to MySQL...');

    const connection = await mysql.createConnection({
      host: dbConfig.host,
      port: dbConfig.port,
      user: dbConfig.user,
      password: dbConfig.password,
      multipleStatements: true
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    const schemaPath = path.join(__dirname, '..', 'database', 'schema.sql');
    console.log('üìÑ Reading schema from:', schemaPath);
    
    if (!fs.existsSync(schemaPath)) {
      throw new Error(`–§–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: ${schemaPath}`);
    }

    const schema = fs.readFileSync(schemaPath, 'utf8');
    console.log('‚úÖ –§–∞–π–ª —Å—Ö–µ–º—ã –ø—Ä–æ—á–∏—Ç–∞–Ω');

    console.log('üóÉÔ∏è Creating database and tables...');
    await connection.query(schema);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
    await connection.end();
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.error('üîê –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ MySQL:');
      console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è –≤ .env —Ñ–∞–π–ª–µ');
      console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
      console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è MySQL');
    } else if (error.code === 'ECONNREFUSED') {
      console.error('üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
      console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MySQL —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3306');
      console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–æ—Å—Ç–∞ –∏ –ø–æ—Ä—Ç–∞ –≤ .env');
    } else {
      console.error(error);
    }
    
    process.exit(1);
  }
}

createDatabase();